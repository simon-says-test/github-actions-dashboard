import config from '../../src/config.js';

class VulnerabilityService {
    constructor(githubService) {
        this.githubService = githubService;
    }

    async getAllVulnerabilities(severity, status, repository) {
        const vulnerabilities = await Promise.all(
            config.repos.map(({ owner, name }) => 
                repository !== "all" && name !== repository
                    ? null
                    : this.getRepoVulnerabilities(owner, name, severity, status)
            )
        );
        return vulnerabilities.filter(Boolean);
    }

    async getRepoVulnerabilities(owner, name, severity, status) {
        try {
            const response = await this.githubService.getSecurityVulnerabilities(owner, name);
            const filteredVulnerabilities = this.processVulnerabilities(response.data, severity, status);

            if (filteredVulnerabilities.length === 0) {
                return this.createEmptyVulnerabilityResult(name, "No vulnerabilities found");
            }

            return {
                repository: name,
                vulnerabilities: filteredVulnerabilities
            };
        } catch (error) {
            return this.createEmptyVulnerabilityResult(
                name,
                `Error fetching vulnerabilities: ${error.message}`
            );
        }
    }

    processVulnerabilities(vulnerabilities, severity, status) {
        return vulnerabilities.filter(vuln => {
            if (severity !== "all" && vuln.security_vulnerability.severity !== severity) return false;
            if (status !== "all") {
                if (status === "fixed" && !vuln.fixed_at) return false;
                if (status === "unfixed" && vuln.fixed_at) return false;
            }
            return true;
        });
    }

    createEmptyVulnerabilityResult(name, message) {
        return {
            repository: name,
            vulnerabilities: [{
                number: "Error",
                dependency: { package: { name: "N/A" } },
                security_advisory: { description: message },
                security_vulnerability: { severity: "N/A" },
                fixed_at: null,
                created_at: new Date().toISOString(),
                html_url: "#"
            }]
        };
    }
}

export default VulnerabilityService;
