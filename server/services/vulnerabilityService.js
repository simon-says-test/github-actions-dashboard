class VulnerabilityService {
    constructor(githubService) {
        this.githubService = githubService;
    }

    processVulnerabilities(vulnerabilities, severity, status) {
        return vulnerabilities.filter(vuln => {
            if (severity !== "all" && vuln.security_vulnerability.severity !== severity) return false;
            if (status !== "all") {
                if (status === "fixed" && !vuln.fixed_at) return false;
                if (status === "unfixed" && vuln.fixed_at) return false;
            }
            return true;
        });
    }

    createEmptyVulnerabilityResult(name, message) {
        return {
            repository: name,
            vulnerabilities: [{
                number: "Error",
                dependency: { package: { name: "N/A" } },
                security_advisory: { description: message },
                security_vulnerability: { severity: "N/A" },
                fixed_at: null,
                created_at: new Date().toISOString(),
                html_url: "#"
            }]
        };
    }
}

module.exports = VulnerabilityService;
